package com.example.a2022swproject.mainFunction.userBoard.BoardModel;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.util.Log;

import androidx.annotation.NonNull;

import com.example.a2022swproject.account.model.UserRepository;
import com.example.a2022swproject.mainFunction.Result;
import com.example.a2022swproject.mainFunction.SingleCallBack;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.common.collect.ArrayTable;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FileDownloadTask;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;

public class BoardRepository {

    private static BoardRepository INSTANCE = new BoardRepository();

    //firebasefirestore -> text, firebaseStorage ->image
    private FirebaseFirestore boardStorage = FirebaseFirestore.getInstance();


    //storage (개정 전)
    private FirebaseStorage itemStorage = FirebaseStorage.getInstance();
    private StorageReference itemRef = itemStorage.getReference().child("item");

    private FirebaseStorage boardImageStorage = FirebaseStorage.getInstance();
    private StorageReference boardImagesRef = boardImageStorage.getReference().child("boardImages");

    //firestore database (인공지능 돌릴 이미지)
    private FirebaseFirestore tmpImageStorage = FirebaseFirestore.getInstance();

    private CollectionReference boardRef = boardStorage.collection("board");
    private CollectionReference tmpImageRef = tmpImageStorage.collection("tmpImage");

    UserRepository userRepository = UserRepository.getInstance();

    private Board currentBoard;
    private ArrayList<Board> boardList;
    private ArrayList<Board> detailBoardList;

    private BoardRepository() {
    }

    private String furnitureType = "can not find";
    private String currentBoardNumber = "";

    public static BoardRepository getInstance() {
        return INSTANCE;
    }

    private String boardImageByte;


    //이미지 삽입
    public void writingBoardImg(String boardImageByteString, SingleCallBack<Result<Board>> callback) {

        String boardNumber = userRepository.getUserEmail() + "_" +
                userRepository.getNumberOfPost();

        tmpImageRef.document(boardNumber)
                .set(boardImageByteString)
                .addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        if (task.isSuccessful()) {
                            callback.onComplete(new Result.Success<String>(boardImageByteString));
                            Log.v("BoardRepository", " : tmpImage Upload Success ");
                        }
                    }
                });

    }


    //게시판 작성
    public void writeBoard(Board board, SingleCallBack<Result<Board>> callback) {

        board.setWriterId(userRepository.getUserEmail());
        board.setWriterName(userRepository.getUserName());
        board.setBoardNumber(userRepository.getUserEmail() + "_" + userRepository.getNumberOfPost());
        board.setFurnitureType(furnitureType);

        //글 삽입
        boardRef.document(board.getBoardNumber())
                .set(board)
                .addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        if (task.isSuccessful()) {
                            callback.onComplete(new Result.Success<Board>(board));
                            Log.v("BoardRepository Complete", " : " + BoardRepository.this.toString());
                        } else {
                            callback.onComplete(new Result.Error(new Exception("BoardRepository : Network call Failed")));
                        }
                    }
                });

        userRepository.setNumberOfPost(userRepository.getNumberOfPost() + 1);
    }


    //writingboard - get tmp image document
    public void getTmpImageDocument(String getTmpImageBoardNumber, SingleCallBack<Result<Boolean>> callBack){
        boardRef.get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
                                if(documentSnapshot == null){
                                   callBack.onComplete(new Result.Success<Boolean>(true));
                                }
                            }
                        }
                    }
                });
    }

    //writing board - get furniture Type
    public void getFurnitureType(SingleCallBack<Result<String>> callBack) throws IOException {
        String boardNumber = userRepository.getUserEmail() + "_" +
                userRepository.getNumberOfPost();

        //tmp image에서 해당 문서가 없다면
        //문서가 없는 걸 확인하는 메소드를 반복문으로 돌려놔야하나??
        getTmpImageDocument(boardNumber, new SingleCallBack<Result<Boolean>>() {
            @Override
            public void onComplete(Result<Boolean> result) {
                Boolean tmpImage = false;
                if(result instanceof Result.Success){
                    tmpImage = ((Result.Success<Boolean>)result).getData();

                    if(tmpImage){
                        boardRef.whereEqualTo("boardNumber", boardNumber)
                                .get()
                                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                                    @Override
                                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                                        if (task.isSuccessful()) {
                                            ArrayList<Board> tmpBoard = new ArrayList<>();
                                            for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
                                                Board founderBoard = documentSnapshot.toObject(Board.class);
                                                tmpBoard.add(founderBoard);
                                            }
                                            detailBoardList = tmpBoard;
                                            String furnitureType = detailBoardList.get(0).getFurnitureType();
                                            callBack.onComplete(new Result.Success<String>(furnitureType));

                                        }
                                        ;
                                    }
                                });
                    }

                }
            }
        });



    }

    //BoardItemList- retrieve board
    public void getBoard(SingleCallBack<Result<ArrayList>> callBack) {
        boardRef.get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            ArrayList<Board> tmpBoard = new ArrayList<>();
                            for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
                                Board board = documentSnapshot.toObject(Board.class);
                                tmpBoard.add(board);
                            }
                            boardList = tmpBoard;
                            callBack.onComplete(new Result.Success<ArrayList<Board>>(boardList));
                        }
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {

                    }
                });

    }

    //DetailBoardActivity- retrieve board
    public void getDetailBoard(String boardNumber, SingleCallBack<Result<Board>> callBack) {
        boardRef.whereEqualTo("boardNumber", boardNumber)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            ArrayList<Board> tmpBoard = new ArrayList<>();
                            for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {
                                Board founderBoard = documentSnapshot.toObject(Board.class);
                                tmpBoard.add(founderBoard);
                            }
                            detailBoardList = tmpBoard;
                            callBack.onComplete(new Result.Success<Board>(detailBoardList.get(0)));

                        }
                        ;
                    }
                });
    }

    //Detail Board - take a furniture state
    public void setBoardTakingState(String boardNumber, SingleCallBack<Result<Boolean>> callBack) {
        DocumentReference documentReference = boardRef.document(boardNumber);
        documentReference.update("takeAFurniture", true)
                .addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        callBack.onComplete(new Result.Success<Boolean>(true));
                    }
                });

    }


    public String getCurrentBoardNumber() {
        return currentBoardNumber;
    }

    public void setCurrentBoardNumber(String currentBoardNumber) {
        this.currentBoardNumber = currentBoardNumber;
    }

    public void setFurnitureType(String furnitureType) {
        this.furnitureType = furnitureType;
    }

}


