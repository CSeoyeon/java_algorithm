import java.util.*;

class Solution {

	// 결정 알고리즘은 n부터 m 사이에 답이 있는 것만 사용, 정렬되어있어야함  
	// 문제가 요구하는 상황에서 k((n+m)/2)가 답으로서 가능한 값이 있다. -> k를 좁혀 나가는 것, 최소값을 찾아내야함

	public int count(int[] array, int capacity) {
		int cnt =1, sum =0; 
		
		for(int x: array) {
			if(sum + x > capacity) {
				cnt++;
				sum = x; 
			}
			else sum+= x;
		}
		
		return cnt;
	} 
	
	public int solution(int n, int m, int[] array) {
		int answer = 0;;
		
		//구하고자 하는 답이 lt 와 rt 사이에 값이 있음 
		
		//DVD 최소 용량 -> 가장 큰 값 
		int lt = Arrays.stream(array).max().getAsInt();
		
		//DVD 한장에 넣을 수 있는 최대 값 (다 합한 것) 
		int rt = Arrays.stream(array).sum();
		
		while(lt<=rt) {
			int mid = (lt+rt)/2;
			if(count(array, mid) <= m) {
				answer = mid;
				rt = mid -1; 
			}
			else lt = mid+1;
		}
		

		return answer;

	}

	public static void main(String args[]) throws Exception {
		Solution T = new Solution();
		Scanner scanner = new Scanner(System.in);

		int n = scanner.nextInt();
		int m = scanner.nextInt();
		
		int[] array = new int[n];

		for (int i = 0; i < n; i++) {
			array[i] = scanner.nextInt();
		}

		System.out.println(T.solution(n, m, array));


	}
}
