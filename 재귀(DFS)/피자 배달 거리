import java.util.*;


class Point{
	int x, y;
	Point(int x, int y){
		this.x = x;
		this.y = y;
	}
}

//전체 도시와 피자집 거리를 계산하고 합쳤을 때 가장 적은 값이 나오도록 m개를 고르기 
class Main {
	static int n, m, len, answer = Integer.MAX_VALUE;
	static int[] combi;
	static ArrayList<Point> pz, hs; 

	public void DFS(int L, int s) {
		if(L == m) {
			int sum =0;
			for(Point h : hs) {
				int dis =Integer.MAX_VALUE;
				for(int i :combi) {
					dis = Math.min(dis, Math.abs(h.x - pz.get(i).x) +  Math.abs(h.y - pz.get(i).y));
				}
				sum += dis;
			}
			answer = Math.min(answer, sum);
		}
		else {
			for(int i =s; i<len; i++) {
				combi[L] = i;
				DFS(L+1, i+1);
			}
		}
	}


	public static void main(String[] args) {
		Main T= new Main();
		Scanner scanner = new Scanner(System.in);
		n = scanner.nextInt();
		m = scanner.nextInt();
		pz = new ArrayList<>();
		hs = new ArrayList<>();
		for(int i =0; i<n; i++) {
			for(int j =0; j<n; j++) {
				int tmp = scanner.nextInt();
				if(tmp == 1) hs.add(new Point(i, j));
				if(tmp ==2 )pz.add(new Point(i, j));
			}
		}
		len = pz.size();
		combi = new int[m]; 
		//조합 (level, start)
		T.DFS(0, 0);
		System.out.print(answer);
		
		
	}
}
